{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guesd\\\\OneDrive\\\\Documents\\\\GitHub\\\\MickaelGuesdon_14_0803202\\\\project\\\\src\\\\Components\\\\Dropdown.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport arrowIcon from \"../Media/angle-down-solid.svg\";\n/** Modal showed when the employee is created\r\n * @param {string} selectValue- show in the input a default value\r\n * @param {function} handleSelectChange- change the employee state\r\n * @param {string} selectLabel- Label content\r\n * @param {array} selectList- List of elements in the dropdown\r\n * @param {string} selectName- used as id and to distinguish from other components\r\n * @param {boolean} isOpen- used as a condition to show the dropdown\r\n * @param {function} handleOpen- close the other opened dropdown or calendars \r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropdown = _ref => {\n  _s();\n\n  let {\n    selectValue,\n    handleSelectChange,\n    selectLabel,\n    selectList,\n    selectName,\n    isOpen,\n    handleOpen\n  } = _ref;\n  const [eltText, setEltText] = useState(selectValue.text);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: `${selectName}-btn`,\n      className: \"dropLabel\",\n      children: selectLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: isOpen ? \"dropdown bottom-border\" : \"dropdown\",\n      id: `${selectName}-btn`,\n      onClick: () => handleOpen(selectName),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: eltText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), isOpen ? /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Arrow icon\",\n        src: arrowIcon,\n        className: \"arrow-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Arrow icon\",\n        src: arrowIcon,\n        className: \"arrow-icon rotate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 91\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isOpen ? \"dropOptions active\" : \"dropOptions\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dropdown-list\",\n        id: `${selectName}-menu`,\n        children: selectList.map(elt => /*#__PURE__*/_jsxDEV(\"li\", {\n          value: elt,\n          onClick: () => {\n            setEltText(elt.text);\n            handleSelectChange(selectName, elt.value);\n            handleOpen(selectName);\n          },\n          id: `option-${elt.text}`,\n          className: \"dropdown-option\",\n          tabIndex: \"-1\",\n          children: elt.text\n        }, elt.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dropdown, \"mDj0JYofvomLkb2OeOxWJDOx05E=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["C:/Users/guesd/OneDrive/Documents/GitHub/MickaelGuesdon_14_0803202/project/src/Components/Dropdown.jsx"],"names":["React","useState","arrowIcon","Dropdown","selectValue","handleSelectChange","selectLabel","selectList","selectName","isOpen","handleOpen","eltText","setEltText","text","map","elt","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,QAAQ,GAAG,QAQX;AAAA;;AAAA,MARY;AAChBC,IAAAA,WADgB;AAEhBC,IAAAA,kBAFgB;AAGhBC,IAAAA,WAHgB;AAIhBC,IAAAA,UAJgB;AAKhBC,IAAAA,UALgB;AAMhBC,IAAAA,MANgB;AAOhBC,IAAAA;AAPgB,GAQZ;AAEJ,QAAM,CAACC,OAAD,EAASC,UAAT,IAAqBX,QAAQ,CAACG,WAAW,CAACS,IAAb,CAAnC;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACE;AAAO,MAAA,OAAO,EAAG,GAAEL,UAAW,MAA9B;AAAqC,MAAA,SAAS,EAAC,WAA/C;AAAA,gBACGF;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AACE,MAAA,SAAS,EAAEG,MAAM,GAAE,wBAAF,GAA4B,UAD/C;AAEE,MAAA,EAAE,EAAG,GAAED,UAAW,MAFpB;AAGE,MAAA,OAAO,EAAE,MAAME,UAAU,CAACF,UAAD,CAH3B;AAAA,8BAKE;AAAA,kBAAOG;AAAP;AAAA;AAAA;AAAA;AAAA,cALF,EAMGF,MAAM,gBAAG;AAAM,QAAA,GAAG,EAAE,YAAX;AAAyB,QAAA,GAAG,EAAEP,SAA9B;AAAyC,QAAA,SAAS,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,cAAH,gBAA2E;AAAK,QAAA,GAAG,EAAE,YAAV;AAAwB,QAAA,GAAG,EAAEA,SAA7B;AAAyC,QAAA,SAAS,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,cANpF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAYE;AAAK,MAAA,SAAS,EAAEO,MAAM,GAAG,oBAAH,GAA0B,aAAhD;AAAA,6BACE;AAAI,QAAA,SAAS,EAAC,eAAd;AAA8B,QAAA,EAAE,EAAG,GAAED,UAAW,OAAhD;AAAA,kBACGD,UAAU,CAACO,GAAX,CAAgBC,GAAD,iBACd;AAEE,UAAA,KAAK,EAAEA,GAFT;AAGE,UAAA,OAAO,EAAE,MAAM;AACbH,YAAAA,UAAU,CAACG,GAAG,CAACF,IAAL,CAAV;AACAR,YAAAA,kBAAkB,CAACG,UAAD,EAAaO,GAAG,CAACC,KAAjB,CAAlB;AACAN,YAAAA,UAAU,CAACF,UAAD,CAAV;AACD,WAPH;AAQE,UAAA,EAAE,EAAG,UAASO,GAAG,CAACF,IAAK,EARzB;AASE,UAAA,SAAS,EAAC,iBATZ;AAUE,UAAA,QAAQ,EAAC,IAVX;AAAA,oBAYGE,GAAG,CAACF;AAZP,WACOE,GAAG,CAACC,KADX;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CA9CD;;GAAMb,Q;;KAAAA,Q;AA+CN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport arrowIcon from \"../Media/angle-down-solid.svg\"\r\n\r\n\r\n/** Modal showed when the employee is created\r\n * @param {string} selectValue- show in the input a default value\r\n * @param {function} handleSelectChange- change the employee state\r\n * @param {string} selectLabel- Label content\r\n * @param {array} selectList- List of elements in the dropdown\r\n * @param {string} selectName- used as id and to distinguish from other components\r\n * @param {boolean} isOpen- used as a condition to show the dropdown\r\n * @param {function} handleOpen- close the other opened dropdown or calendars \r\n */\r\nconst Dropdown = ({\r\n  selectValue,\r\n  handleSelectChange,\r\n  selectLabel,\r\n  selectList,\r\n  selectName,\r\n  isOpen,\r\n  handleOpen,\r\n}) => {\r\n\r\n  const [eltText,setEltText]=useState(selectValue.text)\r\n  return (\r\n    <div className=\"dropWrapper\">\r\n      <label htmlFor={`${selectName}-btn`} className=\"dropLabel\">\r\n        {selectLabel}\r\n      </label>\r\n      <span\r\n        className={isOpen ?\"dropdown bottom-border\": \"dropdown\"}\r\n        id={`${selectName}-btn`}\r\n        onClick={() => handleOpen(selectName)}\r\n      >\r\n        <span>{eltText}</span>\r\n        {isOpen ? <img  alt={\"Arrow icon\"} src={arrowIcon} className=\"arrow-icon\"></img> :<img alt={\"Arrow icon\"} src={arrowIcon}  className=\"arrow-icon rotate\"></img> } \r\n      </span>\r\n      <div className={isOpen ? \"dropOptions active\" : \"dropOptions\"}>\r\n        <ul className=\"dropdown-list\" id={`${selectName}-menu`}>\r\n          {selectList.map((elt) => (\r\n            <li\r\n              key={elt.value}\r\n              value={elt}\r\n              onClick={() => {\r\n                setEltText(elt.text)\r\n                handleSelectChange(selectName, elt.value);\r\n                handleOpen(selectName);\r\n              }}\r\n              id={`option-${elt.text}`}\r\n              className=\"dropdown-option\"\r\n              tabIndex=\"-1\"\r\n            >\r\n              {elt.text}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}