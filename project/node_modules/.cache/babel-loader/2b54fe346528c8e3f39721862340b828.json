{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guesd\\\\OneDrive\\\\Documents\\\\GitHub\\\\MickaelGuesdon_14_0803202\\\\project\\\\src\\\\Addon\\\\headerTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { SortUp } from './Media/sortUp';\nimport { SortDown } from './Media/sortDown';\nimport { UserContext } from './App';\nimport sortBy from './sort';\n/**Table Head \r\n * @param {boolean} arrowClicked -check if an arrow is clicked\r\n * @param {function} setArrowClicked - avoid that 2 arrows are clicked at the same time\r\n * @param {string} dataType - label name used for the sortBy function\r\n * @param {string} thName - <th> content\r\n * @param {string} id - <th> id\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TableHeadTh(_ref) {\n  _s();\n\n  let {\n    arrowClicked,\n    setArrowClicked,\n    dataType,\n    thName,\n    id\n  } = _ref;\n  const value = React.useContext(UserContext);\n  const [upIsClicked, setUpIsClicked] = useState(false);\n  const [downIsClicked, setDownIsClicked] = useState(false);\n  const [resetUp, setResetUp] = useState(false);\n  const [resetDown, setResetDown] = useState(false); //Reset all the arrows when a new one is clicked\n\n  useEffect(() => {\n    if (!arrowClicked) {\n      setUpIsClicked(false);\n      setDownIsClicked(false);\n    }\n  }, [arrowClicked]); //activate an arrow Up after the reset\n\n  useEffect(() => {\n    if (resetUp) {\n      setUpIsClicked(true);\n      setArrowClicked(true);\n      setResetUp(false);\n    }\n  }, [resetUp, setArrowClicked]); //activate an arrow Down after the reset\n\n  useEffect(() => {\n    if (resetDown) {\n      setDownIsClicked(true);\n      setArrowClicked(true);\n      setResetDown(false);\n    }\n  }, [resetDown, setArrowClicked]); //sort the table and change the arrow style\n\n  function handleClickUp() {\n    if (!upIsClicked) {\n      if (!arrowClicked) {\n        setUpIsClicked(true);\n        setArrowClicked(true);\n      } else {\n        setArrowClicked(false);\n        setResetUp(true);\n      }\n\n      sortBy('up', dataType, value.employees, value.setEmployees);\n    }\n  } //sort the table and change the arrow style\n\n\n  function handleClickDown() {\n    if (!downIsClicked) {\n      if (!arrowClicked) {\n        setDownIsClicked(true);\n        setArrowClicked(true);\n      } else {\n        setArrowClicked(false);\n        setResetDown(true);\n      }\n\n      sortBy('down', dataType, value.employees, value.setEmployees);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"th\", {\n    id: id,\n    className: \"dataTableTh\",\n    children: [thName, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"iconSort\",\n      children: [/*#__PURE__*/_jsxDEV(SortUp, {\n        onClick: handleClickUp,\n        className: upIsClicked ? \"dataTable-up clicked\" : \"dataTable-up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SortDown, {\n        onClick: handleClickDown,\n        className: downIsClicked ? \"dataTable-down clicked\" : \"dataTable-down\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TableHeadTh, \"C8U9Tj4phDPjKDR1dyIZ+5yw3I0=\");\n\n_c = TableHeadTh;\nexport default TableHeadTh;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableHeadTh\");","map":{"version":3,"sources":["C:/Users/guesd/OneDrive/Documents/GitHub/MickaelGuesdon_14_0803202/project/src/Addon/headerTable.js"],"names":["React","useState","useEffect","SortUp","SortDown","UserContext","sortBy","TableHeadTh","arrowClicked","setArrowClicked","dataType","thName","id","value","useContext","upIsClicked","setUpIsClicked","downIsClicked","setDownIsClicked","resetUp","setResetUp","resetDown","setResetDown","handleClickUp","employees","setEmployees","handleClickDown"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport { SortUp } from './Media/sortUp'\r\nimport { SortDown } from './Media/sortDown'\r\nimport { UserContext} from './App'\r\n\r\n\r\nimport sortBy from './sort'\r\n/**Table Head \r\n * @param {boolean} arrowClicked -check if an arrow is clicked\r\n * @param {function} setArrowClicked - avoid that 2 arrows are clicked at the same time\r\n * @param {string} dataType - label name used for the sortBy function\r\n * @param {string} thName - <th> content\r\n * @param {string} id - <th> id\r\n */\r\nfunction TableHeadTh({arrowClicked,setArrowClicked,dataType,thName,id}){\r\n    const value = React.useContext(UserContext); \r\n\r\n    const [upIsClicked,setUpIsClicked]=useState(false)\r\n    const [downIsClicked,setDownIsClicked]=useState(false)\r\n    const [resetUp,setResetUp]=useState(false)\r\n    const [resetDown,setResetDown]=useState(false)\r\n\r\n    //Reset all the arrows when a new one is clicked\r\n    useEffect(() => {\r\n     if(!arrowClicked){\r\n        setUpIsClicked(false)\r\n        setDownIsClicked(false)\r\n     }\r\n    }, [arrowClicked])\r\n     \r\n\r\n    //activate an arrow Up after the reset\r\n    useEffect(() => {\r\n        if(resetUp){\r\n           setUpIsClicked(true)\r\n           setArrowClicked(true)\r\n           setResetUp(false)\r\n        }\r\n       },[resetUp,setArrowClicked])\r\n\r\n    //activate an arrow Down after the reset\r\n    useEffect(() => {\r\n        if(resetDown){\r\n           setDownIsClicked(true)\r\n           setArrowClicked(true)\r\n           setResetDown(false)\r\n        }\r\n       },[resetDown,setArrowClicked])\r\n\r\n    //sort the table and change the arrow style\r\n    function handleClickUp(){\r\n        if(!upIsClicked){\r\n            if(!arrowClicked){\r\n                setUpIsClicked(true)\r\n                setArrowClicked(true)\r\n            }else {\r\n                setArrowClicked(false)\r\n                setResetUp(true)  \r\n            }\r\n            sortBy('up',dataType,value.employees,value.setEmployees)\r\n        }\r\n    }\r\n\r\n    //sort the table and change the arrow style\r\n    function handleClickDown(){\r\n        if(!downIsClicked){\r\n            if(!arrowClicked){\r\n                setDownIsClicked(true)\r\n                setArrowClicked(true)\r\n            }else {\r\n                setArrowClicked(false)\r\n                setResetDown(true)  \r\n            }\r\n            sortBy('down',dataType,value.employees,value.setEmployees)\r\n\r\n        }\r\n    }\r\n\r\n    return(\r\n        <th id={id} className=\"dataTableTh\">{thName} \r\n            <div className=\"iconSort\">\r\n                <SortUp  onClick={handleClickUp} className={upIsClicked ?\"dataTable-up clicked\":\"dataTable-up\"} />\r\n               <SortDown onClick={handleClickDown} className={downIsClicked ? \"dataTable-down clicked\":\"dataTable-down\"} />\r\n            </div>\r\n        </th> \r\n    )\r\n}\r\n\r\nexport default TableHeadTh"]},"metadata":{},"sourceType":"module"}