{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guesd\\\\OneDrive\\\\Documents\\\\GitHub\\\\MickaelGuesdon_14_0803202\\\\project\\\\src\\\\Components\\\\Picker.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport icon from '../Media/calendar-days-solid.svg';\n/** Modal showed when the employee is created\r\n * @param {string} text -input type and label content\r\n * @param {object} date -date in the state employee, used to be shown in the input as an example\r\n * @param {function} handleInputChange -change the employee state with the input onChange if typed in the input\r\n * @param {function} handleCustomInputChange -change the employee state with the input onChange if picked in the calendar\r\n * @param {string} label- label of the input\r\n * @param {boolean} isOpen- used as a condition to show the dropdown\r\n * @param {function} handleOpen- close the other opened dropdown or calendars \r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Picker(_ref) {\n  _s();\n\n  let {\n    text,\n    date,\n    handleInputChange,\n    handleCustomInputChange,\n    label,\n    name,\n    isOpen,\n    handleOpen\n  } = _ref;\n  const [value, setValue] = useState(new Date());\n  const [mouseY, setMouseY] = useState('0'); //Change the employee state when a date is picked in react calendar\n\n  useEffect(() => {\n    handleCustomInputChange(name, value.toLocaleDateString());\n  }, [value]); //open the element if clicked, and it appears depends the clicked element position\n\n  function handleClick(e) {\n    handleOpen(name);\n    setMouseY(e.target.offsetTop + 21);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: label,\n      children: [text, /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: 'calendar icon',\n        src: icon,\n        className: \"icon-calendar\",\n        onClick: e => handleClick(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      required: true,\n      id: label,\n      type: \"text\",\n      pattern: \"[0-9]{2}/[0-9]{2}/[0-9]{4}\",\n      title: \"The date must be dd/mm/yyyy\",\n      name: name,\n      value: date,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        top: mouseY\n      },\n      className: label,\n      children: /*#__PURE__*/_jsxDEV(Calendar, {\n        onChange: setValue,\n        value: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 68\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Picker, \"xT7ILP9riT+2XUnNo0lPy13gLIc=\");\n\n_c = Picker;\nexport default Picker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Picker\");","map":{"version":3,"sources":["C:/Users/guesd/OneDrive/Documents/GitHub/MickaelGuesdon_14_0803202/project/src/Components/Picker.jsx"],"names":["React","useState","useEffect","Calendar","icon","Picker","text","date","handleInputChange","handleCustomInputChange","label","name","isOpen","handleOpen","value","setValue","Date","mouseY","setMouseY","toLocaleDateString","handleClick","e","target","offsetTop","top"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,kCAAP;AAEA,OAAOC,IAAP,MAAiB,kCAAjB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,MAAT,OAAmG;AAAA;;AAAA,MAAnF;AAACC,IAAAA,IAAD;AAAMC,IAAAA,IAAN;AAAWC,IAAAA,iBAAX;AAA6BC,IAAAA,uBAA7B;AAAqDC,IAAAA,KAArD;AAA2DC,IAAAA,IAA3D;AAAgEC,IAAAA,MAAhE;AAAuEC,IAAAA;AAAvE,GAAmF;AAC/F,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,IAAIe,IAAJ,EAAD,CAAlC;AACA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBjB,QAAQ,CAAC,GAAD,CAAjC,CAF+F,CAI/F;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,uBAAuB,CAACE,IAAD,EAAMG,KAAK,CAACK,kBAAN,EAAN,CAAvB;AACH,GAFQ,EAEN,CAACL,KAAD,CAFM,CAAT,CAL+F,CAS/F;;AACA,WAASM,WAAT,CAAqBC,CAArB,EAAuB;AACnBR,IAAAA,UAAU,CAACF,IAAD,CAAV;AACAO,IAAAA,SAAS,CAACG,CAAC,CAACC,MAAF,CAASC,SAAT,GAAmB,EAApB,CAAT;AACH;;AAED,sBACI;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAEb,KAAjB;AAAA,iBAAyBJ,IAAzB,eACI;AAAM,QAAA,GAAG,EAAE,eAAX;AAA2B,QAAA,GAAG,EAAEF,IAAhC;AAAsC,QAAA,SAAS,EAAC,eAAhD;AAAgE,QAAA,OAAO,EAAGiB,CAAD,IAAMD,WAAW,CAACC,CAAD;AAA1F;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAO,MAAA,QAAQ,MAAf;AAAgB,MAAA,EAAE,EAAEX,KAApB;AAA2B,MAAA,IAAI,EAAC,MAAhC;AAAuC,MAAA,OAAO,EAAC,4BAA/C;AAA4E,MAAA,KAAK,EAAC,6BAAlF;AAAgH,MAAA,IAAI,EAAEC,IAAtH;AAA4H,MAAA,KAAK,EAAEJ,IAAnI;AAAyI,MAAA,QAAQ,EAAEC;AAAnJ;AAAA;AAAA;AAAA;AAAA,YAJJ,EAMKI,MAAM,iBAAI;AAAK,MAAA,KAAK,EAAE;AAACY,QAAAA,GAAG,EAACP;AAAL,OAAZ;AAA0B,MAAA,SAAS,EAAEP,KAArC;AAAA,6BAA4C,QAAC,QAAD;AAAW,QAAA,QAAQ,EAAEK,QAArB;AAA+B,QAAA,KAAK,EAAED;AAAtC;AAAA;AAAA;AAAA;AAAA;AAA5C;AAAA;AAAA;AAAA;AAAA,YANf;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAzBQT,M;;KAAAA,M;AA2BT,eAAeA,MAAf","sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nimport icon from '../Media/calendar-days-solid.svg'\r\n\r\n\r\n/** Modal showed when the employee is created\r\n * @param {string} text -input type and label content\r\n * @param {object} date -date in the state employee, used to be shown in the input as an example\r\n * @param {function} handleInputChange -change the employee state with the input onChange if typed in the input\r\n * @param {function} handleCustomInputChange -change the employee state with the input onChange if picked in the calendar\r\n * @param {string} label- label of the input\r\n * @param {boolean} isOpen- used as a condition to show the dropdown\r\n * @param {function} handleOpen- close the other opened dropdown or calendars \r\n */\r\nfunction Picker({text,date,handleInputChange,handleCustomInputChange,label,name,isOpen,handleOpen}){\r\n    const [value, setValue] = useState(new Date());\r\n    const [mouseY,setMouseY]=useState('0')\r\n\r\n    //Change the employee state when a date is picked in react calendar\r\n    useEffect(() => {\r\n        handleCustomInputChange(name,value.toLocaleDateString())\r\n    }, [value])\r\n\r\n    //open the element if clicked, and it appears depends the clicked element position\r\n    function handleClick(e){\r\n        handleOpen(name)\r\n        setMouseY(e.target.offsetTop+21)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <label  htmlFor={label}>{text}\r\n                <img  alt={'calendar icon'}src={icon} className=\"icon-calendar\" onClick={(e)=>(handleClick(e))}></img>\r\n            </label>\r\n            <input required id={label} type=\"text\" pattern=\"[0-9]{2}/[0-9]{2}/[0-9]{4}\" title=\"The date must be dd/mm/yyyy\" name={name} value={date} onChange={handleInputChange}\r\n               />  \r\n            {isOpen && <div style={{top:mouseY}} className={label}><Calendar  onChange={setValue} value={value}/></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Picker"]},"metadata":{},"sourceType":"module"}