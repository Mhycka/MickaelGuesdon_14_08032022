{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guesd\\\\OneDrive\\\\Documents\\\\GitHub\\\\MickaelGuesdon_14_0803202\\\\project\\\\src\\\\Addon\\\\elementTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\n/** <td> element in the table row */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TdElement(_ref) {\n  _s();\n\n  let {\n    id,\n    typeData\n  } = _ref;\n  const [openOverflow, setOpenOverflow] = useState(false);\n  const [mouseX, setMouseX] = useState(0);\n  const [mouseY, setMouseY] = useState(0);\n  const [cursor, setCursor] = useState('auto'); //if a data is too long to display, onClick a div appears and show the whole data. The div position depends of the element clicked position\n\n  function handleClick(e) {\n    e.preventDefault();\n    e.target.clientWidth < e.target.scrollWidth && setOpenOverflow(true);\n\n    if (window.screen.width - e.clientX < 300) {\n      setMouseX(e.clientX + window.pageXOffset - 310);\n    } else {\n      setMouseX(e.clientX + window.pageXOffset + 5);\n    }\n\n    setMouseY(e.clientY + window.pageYOffset + 5);\n  } //detects if a data is hidden, and change the cursor if true\n\n\n  function handleMouseEnter(e) {\n    e.target.clientWidth < e.target.scrollWidth && setCursor('zoom-in');\n  } //close the overflow div when mouse leave the div with the hidden data in\n\n\n  function handleMouseLeave(e) {\n    setOpenOverflow(false);\n    setCursor('auto');\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"td\", {\n      style: {\n        cursor: cursor\n      },\n      onMouseEnter: e => handleMouseEnter(e),\n      onMouseLeave: e => handleMouseLeave(e),\n      onClick: e => handleClick(e),\n      id: id,\n      className: \"dataTable-td\",\n      children: [typeData, openOverflow && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          left: mouseX,\n          top: mouseY\n        },\n        className: \"div-hover\",\n        children: typeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TdElement, \"KJZCdEKEb2oNp3R66z336NeMzvQ=\");\n\n_c = TdElement;\nexport default TdElement;\n\nvar _c;\n\n$RefreshReg$(_c, \"TdElement\");","map":{"version":3,"sources":["C:/Users/guesd/OneDrive/Documents/GitHub/MickaelGuesdon_14_0803202/project/src/Addon/elementTable.js"],"names":["React","useState","TdElement","id","typeData","openOverflow","setOpenOverflow","mouseX","setMouseX","mouseY","setMouseY","cursor","setCursor","handleClick","e","preventDefault","target","clientWidth","scrollWidth","window","screen","width","clientX","pageXOffset","clientY","pageYOffset","handleMouseEnter","handleMouseLeave","left","top"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA;;;;AACA,SAASC,SAAT,OAAiC;AAAA;;AAAA,MAAd;AAACC,IAAAA,EAAD;AAAIC,IAAAA;AAAJ,GAAc;AAE7B,QAAM,CAACC,YAAD,EAAcC,eAAd,IAA+BL,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM,CAACM,MAAD,EAAQC,SAAR,IAAmBP,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAM,CAACQ,MAAD,EAAQC,SAAR,IAAmBT,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAM,CAACU,MAAD,EAAQC,SAAR,IAAmBX,QAAQ,CAAC,MAAD,CAAjC,CAL6B,CAO7B;;AACA,WAASY,WAAT,CAAqBC,CAArB,EAAuB;AACnBA,IAAAA,CAAC,CAACC,cAAF;AACAD,IAAAA,CAAC,CAACE,MAAF,CAASC,WAAT,GAAuBH,CAAC,CAACE,MAAF,CAASE,WAAhC,IAA+CZ,eAAe,CAAC,IAAD,CAA9D;;AACA,QAAGa,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAoBP,CAAC,CAACQ,OAAtB,GAA+B,GAAlC,EAAsC;AAClCd,MAAAA,SAAS,CAACM,CAAC,CAACQ,OAAF,GAAUH,MAAM,CAACI,WAAjB,GAA6B,GAA9B,CAAT;AACH,KAFD,MAEM;AACFf,MAAAA,SAAS,CAACM,CAAC,CAACQ,OAAF,GAAUH,MAAM,CAACI,WAAjB,GAA6B,CAA9B,CAAT;AACC;;AACLb,IAAAA,SAAS,CAACI,CAAC,CAACU,OAAF,GAAWL,MAAM,CAACM,WAAlB,GAA8B,CAA/B,CAAT;AACH,GAjB4B,CAmB7B;;;AACA,WAASC,gBAAT,CAA0BZ,CAA1B,EAA4B;AACxBA,IAAAA,CAAC,CAACE,MAAF,CAASC,WAAT,GAAuBH,CAAC,CAACE,MAAF,CAASE,WAAhC,IAA+CN,SAAS,CAAC,SAAD,CAAxD;AACH,GAtB4B,CAwB7B;;;AACA,WAASe,gBAAT,CAA0Bb,CAA1B,EAA4B;AACzBR,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAM,IAAAA,SAAS,CAAC,MAAD,CAAT;AACF;;AAED,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,2BACI;AAAI,MAAA,KAAK,EAAE;AAACD,QAAAA,MAAM,EAACA;AAAR,OAAX;AAA4B,MAAA,YAAY,EAAGG,CAAD,IAAKY,gBAAgB,CAACZ,CAAD,CAA/D;AAAoE,MAAA,YAAY,EAAGA,CAAD,IAAKa,gBAAgB,CAACb,CAAD,CAAvG;AAA4G,MAAA,OAAO,EAAGA,CAAD,IAAKD,WAAW,CAACC,CAAD,CAArI;AAA0I,MAAA,EAAE,EAAEX,EAA9I;AAAkJ,MAAA,SAAS,EAAC,cAA5J;AAAA,iBAA4KC,QAA5K,EACCC,YAAY,iBAAI;AAAM,QAAA,KAAK,EAAE;AAACuB,UAAAA,IAAI,EAACrB,MAAN;AAAcsB,UAAAA,GAAG,EAACpB;AAAlB,SAAb;AAAwC,QAAA,SAAS,EAAC,WAAlD;AAAA,kBAA+DL;AAA/D;AAAA;AAAA;AAAA;AAAA,cADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GArCQF,S;;KAAAA,S;AAuCT,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\n/** <td> element in the table row */\r\nfunction TdElement({id,typeData}){\r\n    \r\n    const [openOverflow,setOpenOverflow]=useState(false)\r\n    const [mouseX,setMouseX]=useState(0)\r\n    const [mouseY,setMouseY]=useState(0)\r\n    const [cursor,setCursor]=useState('auto')\r\n\r\n    //if a data is too long to display, onClick a div appears and show the whole data. The div position depends of the element clicked position\r\n    function handleClick(e){\r\n        e.preventDefault()\r\n        e.target.clientWidth < e.target.scrollWidth && setOpenOverflow(true)\r\n        if(window.screen.width-e.clientX <300){\r\n            setMouseX(e.clientX+window.pageXOffset-310)\r\n        }else {\r\n            setMouseX(e.clientX+window.pageXOffset+5 ) \r\n            }   \r\n        setMouseY(e.clientY+ window.pageYOffset+5)  \r\n    }\r\n\r\n    //detects if a data is hidden, and change the cursor if true\r\n    function handleMouseEnter(e){\r\n        e.target.clientWidth < e.target.scrollWidth && setCursor('zoom-in')   \r\n    }\r\n\r\n    //close the overflow div when mouse leave the div with the hidden data in\r\n    function handleMouseLeave(e){\r\n       setOpenOverflow(false)\r\n       setCursor('auto')\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <td style={{cursor:cursor}} onMouseEnter={(e)=>handleMouseEnter(e)} onMouseLeave={(e)=>handleMouseLeave(e)} onClick={(e)=>handleClick(e)} id={id} className=\"dataTable-td\">{typeData}\r\n            {openOverflow && <span style={{left:mouseX, top:mouseY}} className=\"div-hover\">{typeData}</span>}\r\n            </td>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TdElement"]},"metadata":{},"sourceType":"module"}