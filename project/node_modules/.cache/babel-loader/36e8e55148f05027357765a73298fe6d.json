{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guesd\\\\OneDrive\\\\Documents\\\\GitHub\\\\MickaelGuesdon_14_0803202\\\\project\\\\src\\\\Components\\\\Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { StatesData } from \"../Data/StatesData\";\nimport Message from \"./Message\";\nimport Dropdown from './Dropdown';\nimport { Departments } from '../Data/Departement';\nimport Picker from './Picker';\n/** Modal showed when the employee is created\r\n * @param {function} handleSubmit- put the new employee in the state\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Form(_ref) {\n  _s();\n\n  let {\n    handleSubmit\n  } = _ref;\n  //check if a element is open to avoir 2 opened elements like dropdown or calendar\n  const initialState = {\n    dateOfBirth: false,\n    startDate: false,\n    state: false,\n    department: false\n  };\n  const [openedElts, setOpenElts] = useState(initialState); //state used to display the modal when the employee is \"created\"\n\n  const [created, setCreated] = useState(false); //the data required for a new employee\n\n  const initialDataState = {\n    firstName: '',\n    lastName: '',\n    startDate: new Date().toLocaleDateString(),\n    department: Departments[0].value,\n    dateOfBirth: 'dd/mm/yyyy',\n    street: '',\n    city: '',\n    state: StatesData[0].value,\n    zipCode: ''\n  };\n  const [data, setData] = useState(initialDataState); //validate the form, put the employee in the state, open the modal and reset the inputs\n\n  const handleSubmitForm = async e => {\n    e.preventDefault();\n    handleSubmit(data);\n    setCreated(true);\n    setData(initialDataState);\n  }; //change the data and the input displayed\n\n\n  const handleInputChange = e => {\n    setData({ ...data,\n      [e.target.name]: e.target.value\n    });\n  }; //change the data and the input displayed for the calendar and dropdown, because the list of value is not the targeted element \n\n\n  const handleCustomInputChange = (name, value) => {\n    setData({ ...data,\n      [name]: value\n    });\n  }; //if one element is open, it close all of them. If none are open, the clicked element opens\n\n\n  const handleElementsOpening = elt => {\n    if (openedElts.startDate || openedElts.dateOfBirth || openedElts.department || openedElts.state) {\n      setOpenElts(initialState);\n    } else {\n      setOpenElts({ ...openedElts,\n        [elt]: !openedElts[elt]\n      });\n    }\n  }; //if one input is changed, the dropdowns/calendar close\n\n\n  useEffect(() => {\n    setOpenElts(initialState);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmitForm,\n      id: \"create-employee\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"first-name\",\n        children: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        required: true,\n        pattern: \"[A-za-z].{1,}\",\n        title: \"2 characters minimum\",\n        type: \"text\",\n        name: \"firstName\",\n        value: data.firstName,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"last-name\",\n        children: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        required: true,\n        type: \"text\",\n        name: \"lastName\",\n        pattern: \"[A-Za-z].{1,}\",\n        title: \"2 characters minimum\",\n        value: data.lastName,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Picker, {\n        text: \"Date of Birth\",\n        date: data.dateOfBirth,\n        handleInputChange: handleInputChange,\n        handleCustomInputChange: handleCustomInputChange,\n        label: \"date-of-birth\",\n        name: \"dateOfBirth\",\n        isOpen: openedElts.dateOfBirth,\n        handleOpen: handleElementsOpening\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Picker, {\n        text: \"Start Date\",\n        date: data.startDate,\n        handleInputChange: handleInputChange,\n        handleCustomInputChange: handleCustomInputChange,\n        label: \"start-date\",\n        name: \"startDate\",\n        isOpen: openedElts.startDate,\n        handleOpen: handleElementsOpening\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"address\",\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"street\",\n          children: \"Street\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          required: true,\n          type: \"text\",\n          name: \"street\",\n          title: \"This field is required\",\n          value: data.street,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"city\",\n          children: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          required: true,\n          type: \"text\",\n          name: \"city\",\n          pattern: \"[A-za-z].{1,}\",\n          title: \"2 characters minimum\",\n          value: data.city,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          selectValue: StatesData[0],\n          handleSelectChange: handleCustomInputChange,\n          selectLabel: \"State\",\n          selectList: StatesData,\n          selectName: \"state\",\n          isOpen: openedElts.state,\n          handleOpen: handleElementsOpening\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"zip-code\",\n          children: \"Zip Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          required: true,\n          id: \"zip-code\",\n          type: \"text\",\n          name: \"zipCode\",\n          pattern: \"[0-9].{1,}\",\n          title: \"Must be a number\",\n          value: data.zipCode,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        selectValue: Departments[0],\n        handleSelectChange: handleCustomInputChange,\n        selectLabel: \"Department\",\n        selectList: Departments,\n        selectName: \"department\",\n        isOpen: openedElts.department,\n        handleOpen: handleElementsOpening\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), created === true ? /*#__PURE__*/_jsxDEV(Message, {\n      setCreated: setCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 32\n    }, this) : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Form, \"iqyfeh2S1Lm3oJUjR/G0qsxQxj8=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/guesd/OneDrive/Documents/GitHub/MickaelGuesdon_14_0803202/project/src/Components/Form.jsx"],"names":["React","useState","useEffect","StatesData","Message","Dropdown","Departments","Picker","Form","handleSubmit","initialState","dateOfBirth","startDate","state","department","openedElts","setOpenElts","created","setCreated","initialDataState","firstName","lastName","Date","toLocaleDateString","value","street","city","zipCode","data","setData","handleSubmitForm","e","preventDefault","handleInputChange","target","name","handleCustomInputChange","handleElementsOpening","elt"],"mappings":"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","sourcesContent":["import React, { useState,useEffect} from 'react'\r\nimport { StatesData } from \"../Data/StatesData\";\r\nimport Message from \"./Message\";\r\nimport Dropdown from './Dropdown';\r\nimport {Departments} from '../Data/Departement';\r\nimport Picker from './Picker';\r\n\r\n\r\n\r\n/** Modal showed when the employee is created\r\n * @param {function} handleSubmit- put the new employee in the state\r\n */\r\nfunction Form({handleSubmit}) {\r\n  \r\n    //check if a element is open to avoir 2 opened elements like dropdown or calendar\r\n    const initialState = {\r\n        dateOfBirth: false,\r\n        startDate: false,\r\n        state: false,\r\n        department: false,\r\n      };\r\n    const [openedElts, setOpenElts] = useState(initialState);\r\n\r\n    //state used to display the modal when the employee is \"created\"\r\n    const [created, setCreated]= useState(false)\r\n    \r\n    //the data required for a new employee\r\n    const initialDataState= {\r\n        firstName:'',\r\n        lastName:'',\r\n        startDate: new Date().toLocaleDateString(),\r\n        department:Departments[0].value,\r\n        dateOfBirth:'dd/mm/yyyy',\r\n        street:'',\r\n        city:'',\r\n        state:StatesData[0].value,\r\n        zipCode:''\r\n    }\r\n    const [data,setData]= useState(initialDataState)\r\n\r\n    //validate the form, put the employee in the state, open the modal and reset the inputs\r\n    const handleSubmitForm = async e => {\r\n        e.preventDefault();\r\n        handleSubmit(data)\r\n        setCreated(true)\r\n        setData(initialDataState)  \r\n    }\r\n\r\n    //change the data and the input displayed\r\n    const handleInputChange = (e) => {\r\n        setData({\r\n            ...data,\r\n            [e.target.name]: e.target.value,\r\n            })\r\n      };\r\n    \r\n    //change the data and the input displayed for the calendar and dropdown, because the list of value is not the targeted element \r\n    const handleCustomInputChange = (name, value) => {\r\n        setData({\r\n            ...data,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    //if one element is open, it close all of them. If none are open, the clicked element opens\r\n    const handleElementsOpening = (elt) => { \r\n        if(openedElts.startDate ||openedElts.dateOfBirth || openedElts.department || openedElts.state) {\r\n            setOpenElts(initialState)  \r\n        }  else {\r\n            setOpenElts({\r\n                ...openedElts,\r\n                [elt]: !openedElts[elt],\r\n            }); \r\n        }\r\n    };\r\n    \r\n   //if one input is changed, the dropdowns/calendar close\r\n    useEffect(() => {\r\n        setOpenElts(initialState) \r\n    }, [data])\r\n\r\n    return (\r\n        <React.Fragment >\r\n            \r\n            <form onSubmit={handleSubmitForm} id=\"create-employee\">\r\n                <label htmlFor=\"first-name\">First Name</label>\r\n                <input required pattern=\"[A-za-z].{1,}\" title=\"2 characters minimum\" type=\"text\" name='firstName'   value={data.firstName} onChange={handleInputChange}/>\r\n\r\n                <label htmlFor=\"last-name\">Last Name</label>\r\n                <input required type=\"text\"  name='lastName' pattern=\"[A-Za-z].{1,}\" title=\"2 characters minimum\" value={data.lastName} onChange={handleInputChange} />\r\n\r\n                <Picker \r\n                text=\"Date of Birth\"\r\n                date={data.dateOfBirth} \r\n                handleInputChange={handleInputChange}\r\n                handleCustomInputChange={handleCustomInputChange}\r\n                label=\"date-of-birth\"\r\n                name='dateOfBirth'\r\n                isOpen={openedElts.dateOfBirth}\r\n                handleOpen={handleElementsOpening}\r\n                />\r\n\r\n                <Picker \r\n                text=\"Start Date\"\r\n                date={data.startDate} \r\n                handleInputChange={handleInputChange}\r\n                handleCustomInputChange={handleCustomInputChange}\r\n                label=\"start-date\"\r\n                name='startDate'\r\n                isOpen={openedElts.startDate}\r\n                handleOpen={handleElementsOpening}\r\n                />\r\n\r\n                <fieldset className=\"address\">\r\n                    <legend>Address</legend>\r\n\r\n                    <label htmlFor=\"street\">Street</label>\r\n                    <input required  type=\"text\" name='street'  title=\"This field is required\" value={data.street} onChange={handleInputChange}/>\r\n\r\n                    <label htmlFor=\"city\">City</label>\r\n                    <input required type=\"text\"  name='city' pattern=\"[A-za-z].{1,}\" title=\"2 characters minimum\" value={data.city} onChange={handleInputChange}/>\r\n                    \r\n                    <Dropdown\r\n                    selectValue={StatesData[0]}\r\n                    handleSelectChange={handleCustomInputChange}\r\n                    selectLabel=\"State\"\r\n                    selectList={StatesData}\r\n                    selectName=\"state\"\r\n                    isOpen={openedElts.state}\r\n                    handleOpen={handleElementsOpening} />\r\n\r\n                    <label htmlFor=\"zip-code\">Zip Code</label>\r\n                    <input required id=\"zip-code\" type=\"text\" name='zipCode'pattern=\"[0-9].{1,}\" title=\"Must be a number\" value={data.zipCode} onChange={handleInputChange} />\r\n                </fieldset>\r\n                \r\n                <Dropdown\r\n                selectValue={Departments[0]}\r\n                handleSelectChange={handleCustomInputChange}\r\n                selectLabel=\"Department\"\r\n                selectList={Departments}\r\n                selectName=\"department\"\r\n                isOpen={openedElts.department}\r\n                handleOpen={handleElementsOpening}\r\n                    />\r\n                <button className=\"save-button\">Save</button>\r\n            </form>\r\n            {created=== true ? <Message setCreated={setCreated}/>:''}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Form"]},"metadata":{},"sourceType":"module"}